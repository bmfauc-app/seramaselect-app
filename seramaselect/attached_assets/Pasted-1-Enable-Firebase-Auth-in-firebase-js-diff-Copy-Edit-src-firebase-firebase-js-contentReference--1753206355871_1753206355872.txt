1. Enable Firebase Auth in firebase.js
diff
Copy
Edit
// src/firebase/firebase.js :contentReference[oaicite:0]{index=0}
 import { initializeApp, getApps, getApp } from 'firebase/app';
 import { getFirestore } from 'firebase/firestore';
 import { getStorage } from 'firebase/storage';
+import { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';

 const firebaseConfig = { … };

 const app = getApps().length ? getApp() : initializeApp(firebaseConfig);

 export const db = getFirestore(app);
 export const storage = getStorage(app);
+export const auth = getAuth(app);
+export const googleProvider = new GoogleAuthProvider();
+
+// Optional helper: trigger Google Sign-In
+export const signInWithGoogle = () =>
+  signInWithPopup(auth, googleProvider);
—adds auth, a Google provider, and a helper you can call from your top-level app or a dedicated Login button.

2. Update TraitContext to namespace under users/{uid}/records
diff
Copy
Edit
// src/contexts/TraitContext.jsx :contentReference[oaicite:1]{index=1}
-import { db, storage } from '../firebase/firebase';
-import { collection, doc, setDoc, getDocs, deleteDoc } from 'firebase/firestore';
+import { db, storage, auth } from '../firebase/firebase';
+import {
+  collection,
+  doc,
+  setDoc,
+  getDocs,
+  deleteDoc
+} from 'firebase/firestore';
 import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';
+import { onAuthStateChanged } from 'firebase/auth';

 export const TraitProvider = ({ children }) => {
   const [user, setUser] = useState(null);
+  const basePath = user
+    ? collection(db, 'users', user.uid, 'records')
+    : null;

   // … existing state …

+  // 2a. Watch for auth changes
+  useEffect(() => {
+    const unsub = onAuthStateChanged(auth, u => {
+      setUser(u);
+      // optionally: clear records and traitData on sign-out
+    });
+    return unsub;
+  }, []);

   // 2b. Fetch only this user’s records
   useEffect(() => {
-    const snapshot = await getDocs(collection(db, 'records'));
+    if (!basePath) return;
+    const snapshot = await getDocs(basePath);
     const all = snapshot.docs.map(d => d.data());
     setRecords(all);
   }, [basePath]);

   const saveRecord = async (payload = null, imageFile = null) => {
     // … image upload …

     const record = {
       id: traitData.id || `record_${Date.now()}`,
       // … fields …
     };

-    await setDoc(doc(db, 'records', record.id), record);
+    // write under users/{uid}/records/{id}
+    await setDoc(doc(basePath, record.id), record);

     setRecords(prev => {
       const filtered = prev.filter(r => r.id !== record.id);
       return [ …filtered, record ];
     });
     return record;
   };

   const deleteRecord = async id => {
-    await deleteDoc(doc(db, 'records', id));
+    await deleteDoc(doc(basePath, id));
     setRecords(prev => prev.filter(r => r.id !== id));
   };

   const updateRecordPhoto = async (id, file) => {
     // … upload …
-    await setDoc(doc(db, 'records', id), updatedRecord);
+    await setDoc(doc(basePath, id), updatedRecord);
     setRecords(prev => prev.map(r => r.id === id ? updatedRecord : r));
     return updatedRecord;
   };

   return (
     <TraitContext.Provider value={{ … }}>
       {children}
     </TraitContext.Provider>
   );
 };
What changed?